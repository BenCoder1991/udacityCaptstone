version: 2.1

orbs:
  aws-eks: circleci/aws-eks@2.2.0
  kubernetes: circleci/kubernetes@1.3

commands:
  destroy-environment:
    description: Destroy cluster on fail
    parameters:
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            eksctl delete cluster --name=udacity-capstone-cluster
            
jobs:
  lint-dockerfile:
    docker:
    # Use the same Docker base as the project
    # taken from the microservices exercise as reference.
      - image: python:3.7.3-stretch
    steps:
      - checkout
      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            make install
            # Install hadolint
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 
            chmod +x /bin/hadolint
      - run:
          name: run lint
          command: |
            . venv/bin/activate
            make lint 
  
  # reference: https://github.com/udacity/nd9991-c3-hello-world-exercise-solution/blob/main/.circleci/config.yml
  # reference: https://circleci.com/blog/how-to-build-a-docker-image-on-circleci-2-0/
  # reference: https://circleci.com/docs/custom-images/
  build-docker-image-before-update:
    docker:
      - image: docker:17.05.0-ce-git
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD  # context / project UI env-var reference
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Install dependencies
          command: |
            apk add --no-cache \
              py-pip=9.0.0-r1
            pip install \
              docker-compose==1.12.0 \
              awscli==1.11.76
      - run:
          name: check docker version
          command: |
            which docker
      - run:
          name: build docker image
          command: |
            docker build --tag=nginxapp .
      - run:
          name: list all docker images
          command: |
            # List docker images
            # https://docs.docker.com/engine/reference/commandline/images/
            docker images --all
      - run:
          name: push image to docker
          command:  |
            # Step 1: Create dockerpath
            dockerpath="bencdr0/nginxapp"
            echo "Docker ID and Image: $dockerpath"
            
            # Step 2: Authenticate & tag
            # https://docs.docker.com/engine/reference/commandline/login/
            docker login --username $DOCKERHUB_USERNAME --password $DOCKERHUB_PASSWORD
            docker tag nginxapp:latest $dockerpath:latest # according to docker standard documentation
            docker image ls
            
            # Step 3: Push image to a docker repository, according to cheat-sheet and standard documentation
            docker push $dockerpath:latest
            docker logout
      - destroy-environment
  
  # Job reference: https://circleci.com/developer/orbs/orb/circleci/aws-eks         
  create-cluster:
    docker:
      - image: 'cimg/python:3.10'
        user: root
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - kubernetes/install:
          kubectl-version: v1.22.0
      - run:
          command: |
            ## Reference. https://docs.aws.amazon.com/eks/latest/userguide/eksctl.html
            # Step 1: install EKSCTL
            curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
            sudo mv /tmp/eksctl /usr/local/bin
            eksctl version
            
            # Step 2: create EKS Cluster
            # Reference: https://andresaaap.medium.com/testing-a-container-app-or-microservices-app-to-deploy-it-to-an-aws-eks-cluster-2b8778e22d21
            eksctl create cluster --name << parameters.cluster-name >> --zones=us-east-1a,us-east-1b,us-east-1c,us-east-1d --node-type "t2.medium" --nodes 2
            eksctl get cluster --name << parameters.cluster-name  >>
          name: Create cluster
      - destroy-environment
  
  initialize-cluster:
    docker:
      - image: 'cimg/python:3.10'
        user: root
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - kubernetes/install:
          kubectl-version: v1.22.0
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
      - run:
          name: Install EKSCTL
          command: |
            ## Reference. https://docs.aws.amazon.com/eks/latest/userguide/eksctl.html
            # Step 1 -Install EKSCTL
            curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
            sudo mv /tmp/eksctl /usr/local/bin
            eksctl version
      - run:
          name: Initialize Cluster with Docker image
          command: |
            # Step 0: define dockerpath
            dockerpath="bencdr0/nginxapp"
            
            # Step 1 - Run the Docker Hub container with kubernetes
            kubectl create deployment nginxapp-deployment --image=bencdr0/nginxapp:latest
            # Reference: https://www.theserverside.com/blog/Coffee-Talk-Java-News-Stories-and-Opinions/Imperative-vs-declarative-Kubernetes-commands-Whats-the-difference
            kubectl scale --replicas=2 deployment/nginxapp-deployment 
            kubectl expose deployment nginxapp-deployment --type=LoadBalancer --port=8000 --target-port=80
            
            # sleep to allow full start-up
            sleep 60
      - run:
          name: Run diagnostics
          command: |
            # Step 2 - List all relevant pod, deployment, service, node information to debug
            kubectl get pods
            kubectl get deployments
            kubectl get services
            kubectl get nodes
            kubectl describe service
            export NODE_ID=$(echo $(kubectl get pods) | cut -d ' ' -f 6) 
            echo NODE_ID=$NODE_ID
            export NODE_PORT=$(kubectl get service/nginxapp-deployment -o go-template='{{(index .spec.ports 0).nodePort}}')
            echo NODE_PORT=$NODE_PORT
      - run:
          name: Perform Smoke-Test
          command: |
            export external_IP=$(echo $( kubectl get services nginxapp-deployment) | cut -d ' ' -f 10)  
            # Mini smoke test, curl port 8000 (reference: https://knowledge.udacity.com/questions/679601)
            curl $external_IP:8000
          name: Test cluster
      - destroy-environment
  
  # reference: https://github.com/udacity/nd9991-c3-hello-world-exercise-solution/blob/main/.circleci/config.yml
  # reference: https://circleci.com/blog/how-to-build-a-docker-image-on-circleci-2-0/
  # reference: https://circleci.com/docs/custom-images/
  build-docker-image-after-update:
    docker:
      - image: docker:17.05.0-ce-git
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD  # context / project UI env-var reference
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Install dependencies
          command: |
            apk add --no-cache \
              py-pip=9.0.0-r1
            pip install \
              docker-compose==1.12.0 \
              awscli==1.11.76
              # https://superuser.com/questions/1720430/failed-to-run-curl-7-83-0-on-alpine
              apk update
              apk upgrade
              apk add -U curl
      - run:
          name: Update the html file (index.html->index_old.html, index_new.html->index.html)
          command: |
            echo "----------------index.html before change----------------"
            cat index.html
            mv index.html index_old.html
            mv index_new.html index.html
            echo "----------------index.html after change----------------"
            cat index.html
      - run:
          name: check docker version
          command: |
            which docker
      - run:
          name: build docker image
          command: |
            docker build --tag=nginxapp .
      - run:
          name: list all docker images
          command: |
            # List docker images
            # https://docs.docker.com/engine/reference/commandline/images/
            docker images --all
      - run:
          name: push image to docker
          command:  |
            # Step 1: Create dockerpath
            dockerpath="bencdr0/nginxapp"
            echo "Docker ID and Image: $dockerpath"
            
            # Step 2: Authenticate & tag
            # https://docs.docker.com/engine/reference/commandline/login/
            docker login --username $DOCKERHUB_USERNAME --password $DOCKERHUB_PASSWORD
            docker tag nginxapp:latest $dockerpath:latest # according to docker standard documentation
            docker image ls
            
            # Step 3: Push image to a docker repository, according to cheat-sheet and standard documentation
            docker push $dockerpath:latest
            docker logout
      - destroy-environment
  # Reference job flow: https://circleci.com/developer/orbs/orb/circleci/aws-eks   
  update-cluster:
    docker:
      - image: 'cimg/python:3.10'
        user: root
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - kubernetes/install:
          kubectl-version: v1.22.0
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
      - run:
          name: Install EKSCTL
          command: |
            ## Reference. https://docs.aws.amazon.com/eks/latest/userguide/eksctl.html
            # Step 1 -Install EKSCTL
            curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
            sudo mv /tmp/eksctl /usr/local/bin
            eksctl version
      - run:
          name: Perform rolling update / rolling deployment
          command: |
            # Step 0 - Set Docker path
            dockerpath="bencdr0/nginxapp"
            
            # Step 1 - Apply the new image
            # Reference: https://kubernetes.io/docs/tutorials/kubernetes-basics/update/update-interactive/
            kubectl set image deployments/nginxapp-deployment nginxapp=bencdr0/nginxapp:latest
            
            # Step 2 - Restart
            # Reference: https://stackoverflow.com/a/51835397
            minikube kubectl -- rollout restart deployments/nginxapp-deployment

            # see rollout status
            kubectl rollout status deployments/nginxapp-deployment
      - run:
          name: Run diagnostics
          command: |
            # Step 2 - List all relevant pod, deployment, service, node information to debug
            kubectl get pods
            kubectl get deployments
            kubectl get services
            kubectl get nodes
            kubectl describe service
            export NODE_ID=$(echo $(kubectl get pods) | cut -d ' ' -f 6) 
            echo NODE_ID=$NODE_ID
            export NODE_PORT=$(kubectl get service/nginxapp-deployment -o go-template='{{(index .spec.ports 0).nodePort}}')
            echo NODE_PORT=$NODE_PORT
      - run:
          name: Perform Smoke-Test
          command: |
            export external_IP=$(echo $( kubectl get services nginxapp-deployment) | cut -d ' ' -f 10)  
            # Mini smoke test, curl port 8000 (reference: https://knowledge.udacity.com/questions/679601)
            curl $external_IP:8000
      - destroy-environment
  
  delete-cluster:
    docker:
      - image: 'cimg/python:3.10'
        user: root
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - kubernetes/install:
          kubectl-version: v1.22.0
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
      - run:
          name: Install EKSCTL
          command: |
            ## Reference. https://docs.aws.amazon.com/eks/latest/userguide/eksctl.html
            # Step 1: Install EKSCTL
            curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
            sudo mv /tmp/eksctl /usr/local/bin
            eksctl version
      - run:
          name: Delete Cluster
          command: |
            # Step 2: Delete cluster = helper job to delete infrastructure to compensate for local eksctl unavailability
            eksctl delete cluster --name=<< parameters.cluster-name >>

workflows:
  default:
    jobs:
      - lint-dockerfile
      - build-docker-image-before-update
          requires: 
            - build
      - create-cluster:
          cluster-name: udacity-capstone-cluster
          requires:
            - build-docker-image-before-update
      - initialize-cluster:
          cluster-name: udacity-capstone-cluster
          requires:
            - create-cluster
       - build-docker-image-after-update
          requires:
            - initialize-cluster
      - update-cluster:
          cluster-name: udacity-capstone-cluster
          requires:
            - build-docker-image-after-update
      - delete-cluster:
          cluster-name: udacity-capstone-cluster
          requires:
            - update-cluster: