version: 2.1

orbs:
  aws-eks: circleci/aws-eks@2.2.0
  kubernetes: circleci/kubernetes@1.3

commands:
  destroy-environment:
    description: Destroy cluster on fail
    parameters:
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            eksctl delete cluster --name=my-eks-demo
            
jobs:
  build:
    docker:
    # Use the same Docker base as the project
    # taken from the microservices exercise as reference.
      - image: python:3.7.3-stretch

    working_directory: ~/repo

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            make install
            # Install hadolint
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 
            chmod +x /bin/hadolint
          
      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}
        
      # run lint!
      - run:
          name: run lint
          command: |
            . venv/bin/activate
            make lint 
  
  # reference: https://github.com/udacity/nd9991-c3-hello-world-exercise-solution/blob/main/.circleci/config.yml
  # reference: https://circleci.com/blog/how-to-build-a-docker-image-on-circleci-2-0/
  # https://circleci.com/docs/custom-images/
  build-docker-image:
    docker:
      - image: docker:17.05.0-ce-git
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD  # context / project UI env-var reference
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Install dependencies
          command: |
            apk add --no-cache \
              py-pip=9.0.0-r1
            pip install \
              docker-compose==1.12.0 \
              awscli==1.11.76
      - run:
          name: check docker version
          command: |
            which docker
      - run:
          name: build docker image
          command: |
            # Step 1:
            docker build --tag=nginxapp .
      - run:
          name: list all docker images
          command: |
            # Step 2: 
            # List docker images
            # https://docs.docker.com/engine/reference/commandline/images/
            docker images --all
            # Step 1:
      - run:
          name: push image to docker
          command:  |
            # Create dockerpath
            dockerpath="bencdr0/nginxapp"
            
            # check for docker scan:
            # docker scan --version
            
            # Step 2:  
            # Authenticate & tag
            echo "Docker ID and Image: $dockerpath"
            
            # https://docs.docker.com/engine/reference/commandline/login/
            docker login --username $DOCKERHUB_USERNAME --password $DOCKERHUB_PASSWORD
            docker tag nginxapp:latest $dockerpath:latest # according to docker standard documentation
            docker image ls
            
            # Step 3:
            # Push image to a docker repository, according to cheat-sheet and standard documentation
            docker push $dockerpath:latest
            docker logout
      - destroy-environment
    # Reference.https://circleci.com/developer/orbs/orb/circleci/aws-eks         

  create-cluster:
    docker:
      - image: 'cimg/python:3.10'
        user: root
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - kubernetes/install:
          kubectl-version: v1.22.0
      - run:
          command: |
            ## Reference. https://docs.aws.amazon.com/eks/latest/userguide/eksctl.html
            # Step 1: install EKSCTL
            curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
            sudo mv /tmp/eksctl /usr/local/bin
            eksctl version
            
            # Step 2: create EKS Cluster
            # https://andresaaap.medium.com/testing-a-container-app-or-microservices-app-to-deploy-it-to-an-aws-eks-cluster-2b8778e22d21
            eksctl create cluster --name << parameters.cluster-name >> --zones=us-east-1a,us-east-1b,us-east-1c,us-east-1d --node-type "t2.xlarge" --nodes 4
            eksctl get cluster --name << parameters.cluster-name  >>
          name: Create cluster
      - destroy-environment
  
  initialize-cluster:
    docker:
      - image: 'cimg/python:3.10'
        user: root
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - kubernetes/install:
          kubectl-version: v1.22.0
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
      - run:
          command: |
            ## Reference. https://docs.aws.amazon.com/eks/latest/userguide/eksctl.html
            # Step 1 -Install EKSCTL
            curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
            sudo mv /tmp/eksctl /usr/local/bin
            eksctl version
            
            dockerpath="bencdr0/nginxapp"
            # Step 2 - Run the Docker Hub container with kubernetes
            kubectl create deployment nginxapp-deployment --image=bencdr0/nginxapp
            # Reference: https://www.theserverside.com/blog/Coffee-Talk-Java-News-Stories-and-Opinions/Imperative-vs-declarative-Kubernetes-commands-Whats-the-difference
            kubectl scale --replicas=3 deployment/nginxapp-deployment 
            kubectl expose deployment nginxapp-deployment --type=LoadBalancer --port=8000 --target-port=80
            # sleep to allow full start-up
            sleep 60

            # Step 3:
            kubectl get pods
            kubectl get deployments
            kubectl get services
            kubectl get nodes
            export NODE_ID=$(echo $(kubectl get pods) | cut -d ' ' -f 6) 
            echo NODE_ID=$NODE_ID
            export NODE_PORT=$(kubectl get service/nginxapp-deployment -o go-template='{{(index .spec.ports 0).nodePort}}')
            echo NODE_PORT=$NODE_PORT
            export external_IP=$(echo $( kubectl get services nginxapp-deployment) | cut -d ' ' -f 10)  
            #https://knowledge.udacity.com/questions/679601
            kubectl describe service
            
            # workaround to delete the cluster for now as deletion was so error prone and lengthy otherwise.
            sleep 300
            curl $external_IP:8000
            # eksctl delete cluster --name=my-eks-demo
          name: Test cluster
      - destroy-environment

  build-docker-image-after-update:
    docker:
      - image: docker:17.05.0-ce-git
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD  # context / project UI env-var reference
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Install dependencies
          command: |
            apk add --no-cache \
              py-pip=9.0.0-r1
            pip install \
              docker-compose==1.12.0 \
              awscli==1.11.76
      - run:
          name: update html file 
          command: |
            which docker
      - run:
          name: check docker version
          command: |
            mv index.html index_old.html
            mv index_new.html index.html
      - run:
          name: build docker image
          command: |
            # Step 1:
            docker build --tag=nginxapp .
      - run:
          name: list all docker images
          command: |
            # Step 2: 
            # List docker images
            # https://docs.docker.com/engine/reference/commandline/images/
            docker images --all
            # Step 1:
      - run:
          name: push image to docker
          command:  |
            # Create dockerpath
            dockerpath="bencdr0/nginxapp"
            
            # check for docker scan:
            # docker scan --version
            
            # Step 2:  
            # Authenticate & tag
            echo "Docker ID and Image: $dockerpath"
            
            # https://docs.docker.com/engine/reference/commandline/login/
            docker login --username $DOCKERHUB_USERNAME --password $DOCKERHUB_PASSWORD
            docker tag nginxapp:latest $dockerpath:latest # according to docker standard documentation
            docker image ls
            
            # Step 3:
            # Push image to a docker repository, according to cheat-sheet and standard documentation
            docker push $dockerpath:latest
            docker logout
      - destroy-environment
    # Reference.https://circleci.com/developer/orbs/orb/circleci/aws-eks   

  update-cluster:
    docker:
      - image: 'cimg/python:3.10'
        user: root
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - kubernetes/install:
          kubectl-version: v1.22.0
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
      - run:
          command: |
            ## Reference. https://docs.aws.amazon.com/eks/latest/userguide/eksctl.html
            # Step 1 -Install EKSCTL
            curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
            sudo mv /tmp/eksctl /usr/local/bin
            eksctl version
            
            dockerpath="bencdr0/nginxapp"
            # Step 2 - Run the Docker Hub container with kubernetes
            # kubectl create deployment nginxapp-deployment --image=bencdr0/nginxapp
            # Reference: https://www.theserverside.com/blog/Coffee-Talk-Java-News-Stories-and-Opinions/Imperative-vs-declarative-Kubernetes-commands-Whats-the-difference
            # kubectl scale --replicas=3 deployment/nginxapp-deployment 
            # kubectl expose deployment nginxapp-deployment --type=LoadBalancer --port=8000 --target-port=80
            # sleep to allow full start-up
            # https://kubernetes.io/docs/tutorials/kubernetes-basics/update/update-interactive/
            kubectl set image deployments/nginxapp-deployment nginxapp=bencdr0/nginxapp            
            sleep 60
            kubectl rollout status deployments/knginxapp-deployment


            # Step 3:
            kubectl get pods
            kubectl get deployments
            kubectl get services
            kubectl get nodes
            export NODE_ID=$(echo $(kubectl get pods) | cut -d ' ' -f 6) 
            echo NODE_ID=$NODE_ID
            export NODE_PORT=$(kubectl get service/nginxapp-deployment -o go-template='{{(index .spec.ports 0).nodePort}}')
            echo NODE_PORT=$NODE_PORT
            export external_IP=$(echo $( kubectl get services nginxapp-deployment) | cut -d ' ' -f 10)  
            #https://knowledge.udacity.com/questions/679601
            kubectl describe service
            
            # workaround to delete the cluster for now as deletion was so error prone and lengthy otherwise.
            sleep 300
            curl $external_IP:8000
            eksctl delete cluster --name=my-eks-demo
          name: Test cluster
      - destroy-environment
  
  delete-cluster:
    docker:
      - image: 'cimg/python:3.10'
        user: root
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - kubernetes/install:
          kubectl-version: v1.22.0
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
      - run:
          command: |
            ## Reference. https://docs.aws.amazon.com/eks/latest/userguide/eksctl.html
            # Step 1 -Install EKSCTL
            curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
            sudo mv /tmp/eksctl /usr/local/bin
            eksctl version
            # helper job to delete infrastructure to compensate for local eksctl unavailability
            eksctl delete cluster --name=my-eks-demo

workflows:
  default:
    jobs:
      # - build
      - build-docker-image
      #    requires: 
      #      - build
      - create-cluster:
          cluster-name: my-eks-demo
          requires:
            - build-docker-image
      - initialize-cluster:
          cluster-name: my-eks-demo
          requires:
            - create-cluster
      - build-docker-image-after-update:
          requires:
            - initialize-cluster
      - update-cluster:
          cluster-name: my-eks-demo
          requires:
            - build-docker-image-after-update
      # - delete-cluster
      
  # Reference EKS with circleci: https://circleci.com/developer/orbs/orb/circleci/aws-eks